---
AWSTemplateFormatVersion: 2010-09-09

Description: >
  This template deploys a VPC, with
  a public and two private subnets spread
  across three Availabilty Zones
  It deploys an Internet Gateway, with a default route on the public subnets
  It deploys a pair of NAT Gateways (one in each AZ), and default routes for them in the private subnets
  as well as route tables
  Last Modified: 17.06.2024
  Author: Exec <aerioeus@gmail.com>

Metadata: {}
Mappings: {}
Conditions: {}

Parameters:
  Owner:
    Description: Individual Name Responsible for the Stack
    Type : 'AWS::SSM::Parameter::Value<String>'
    Default: /energicos/LEAD-DEVELOPER_NAME

  Project:
    Description: The project name
    Type : 'AWS::SSM::Parameter::Value<String>'
    Default: /energicos/PROJECT_ASA

  Subproject:
    Description: Enter Project Name
    Type : 'AWS::SSM::Parameter::Value<String>'
    Default: /energicos/GLOBAL

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type : 'AWS::SSM::Parameter::Value<String>'
    Default: /energicos/ENVIRONMENT_NAME

  DeleteAfter:
    Description: Enter Date It's Ok to Delete the Stack or 'Never' if meant to be persistent
    Type: String
    Default: Never

  SubnetZone:
    Description: 'Subnet zone.'
    Type: String
    Default: A
    AllowedValues:
    - A
    - B
    - C
    - D

  AlarmthresholdNAT1:
    Description: This is the amount for the NAT Threshold
    Type: String
    Default: '5000000'

  AlarmthresholdNAT2:
    Description: This is the amount for the NAT Threshold
    Type: String
    Default: '0'

Resources:
  # that creates a non-default VPC with a **Class B network**
  # the CIDRBlock is not declared as a parameter to avoid that CIDR will overlap when other user use the tmplate and dont know enough about subnetting
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.16.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        -
          Key: "name"
          Value: "enc_vpc"
        -
          Key: Name
          Value: !Sub ${EnvironmentName} VPC

  # Attaches a gateway to a VPC.
  InternetGateway1:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} ${Project}

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway1
      VpcId: !Ref VPC

  # now we create the public subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 172.16.0.0/20
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} public_subnet_AZ_1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 172.16.16.0/20
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} public_subnet_AZ_2

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 172.16.32.0/20
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} public_subnet_AZ_3

  # now we are creating the private DB subnets
  PrivateDBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 172.16.48.0/20
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} db-subnet_AZ_1

  PrivateDBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 172.16.64.0/20
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} db-subnet_AZ_2

  PrivateDBSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 172.16.80.0/20
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} db-subnet_AZ_3

  # now we are creating the private EC2 subnets
  PrivateEC2Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 172.16.96.0/20
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} ec2-subnet_AZ_1

  PrivateEC2Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 172.16.112.0/20
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} ec2-subnet_AZ_2

  PrivateEC2Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 172.16.128.0/20
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} ec2-subnet_AZ_3

  # create elastic IPs for the NATs
  NATGateway1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway3EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # create NAT gateways for all AZ
  NATGateway1:
    Type: AWS::EC2::NatGateway
    DependsOn: InternetGatewayAttachment
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NATGateway1EIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} NATGateway1

  NATGateway2:
    Type: AWS::EC2::NatGateway
    DependsOn: InternetGatewayAttachment
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NATGateway2EIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} NATGateway2

  NATGateway3:
    Type: AWS::EC2::NatGateway
    DependsOn: InternetGatewayAttachment
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NATGateway3EIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet3
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} NATGateway3

  # create Route Table fot the public Routes
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName} public-subnet-routetable
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
      - Key: DeleteAfter
        Value: !Ref DeleteAfter

  # create a public route
  # any route entries that specify a gateway must specify a dependency on the gatewayattachment resource
  # This is done using the DependsOn attribute
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
    - InternetGatewayAttachment
    - PublicRouteTable
    - InternetGateway1
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway1

  # associate the route table with the public subnets
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicSubnet1
      - PublicRouteTable
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  # create Route Table for the private Subnet using NAT Gateway1
  RouteTableNAT1:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName} NAT1-subnet-routetable
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
      - Key: DeleteAfter
        Value: !Ref DeleteAfter

  # create a public route that associates the NAT gateway with a route table
  # any route entries that specify a gateway must specify a dependency on the gatewayattachment resource
  # This is done using the DependsOn attribute
  RoutePublicNAT1ToInternet:
    Type: AWS::EC2::Route
    DependsOn: RouteTableNAT1
    Properties:
      RouteTableId: !Ref RouteTableNAT1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  # create Route Table for the private Subnet using NAT Gateway2
  RouteTableNAT2:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} NAT2-subnet-routetable

  # create a public route that associates the NAT gateway with a route table
  # any route entries that specify a gateway must specify a dependency on the gatewayattachment resource
  # This is done using the DependsOn attribute
  RoutePublicNAT2ToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableNAT2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

  # create Route Table for the private Subnet using NAT Gateway1
  RouteTableNAT3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} NAT3-subnet-routetable

  # create a public route that associates the NAT gateway with a route table
  # any route entries that specify a gateway must specify a dependency on the gatewayattachment resource
  # This is done using the DependsOn attribute
  RoutePublicNAT3ToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableNAT3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway3

  # associate the route table with the db-subnets
  PrivateDBSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTableNAT1
      SubnetId: !Ref PrivateDBSubnet1

  PrivateDBSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTableNAT2
      SubnetId: !Ref PrivateDBSubnet2

  PrivateDBSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTableNAT3
      SubnetId: !Ref PrivateDBSubnet3

  # associate the route table with the ec2-subnets
  PrivateEC2Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTableNAT1
      SubnetId: !Ref PrivateEC2Subnet1

  PrivateEC2Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTableNAT2
      SubnetId: !Ref PrivateEC2Subnet2

  PrivateEC2Subnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTableNAT3
      SubnetId: !Ref PrivateEC2Subnet3

  # create Network ACLs for RDS subnets
  NetworkAclPrivateRDS:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Network_ACL_RDS

  SubnetNetworkAclAssociationA1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateDBSubnet1
      NetworkAclId:
        Ref: NetworkAclPrivateRDS

  SubnetNetworkAclAssociationB1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateDBSubnet2
      NetworkAclId:
        Ref: NetworkAclPrivateRDS

  SubnetNetworkAclAssociationC1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateDBSubnet3
      NetworkAclId:
        Ref: NetworkAclPrivateRDS

  # inbound rules
  NetworkAclEntryIngress1a:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPrivateRDS
      RuleNumber: '140'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock:  0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  # outbound rules; You can specify -1 for all protocols
  NetworkAclEntryEgress1a:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPrivateRDS
      RuleNumber: '300'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  NetworkAclEntryEgress2a:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPrivateRDS
      RuleNumber: '310'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      Ipv6CidrBlock: ::/0
      PortRange:
        From: '0'
        To: '65535'

  # create Network ACLs for EC2 only private Subnets
  NetworkAclPrivateEC2:
    DependsOn: NetworkAclPrivateRDS
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Network_ACL_EC2

  SubnetNetworkAclAssociationA2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateEC2Subnet1
      NetworkAclId:
        Ref: NetworkAclPrivateEC2

  SubnetNetworkAclAssociationB2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateEC2Subnet2
      NetworkAclId:
        Ref: NetworkAclPrivateEC2

  SubnetNetworkAclAssociationC2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateEC2Subnet3
      NetworkAclId:
        Ref: NetworkAclPrivateEC2

  # inbound rules
  NetworkAclEntryIngress1b:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPrivateEC2
      RuleNumber: '120'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 87.254.251.87/32
      PortRange:
        From: '22'
        To: '22'

  NetworkAclEntryIngress2b:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPrivateEC2
      RuleNumber: '140'
      Protocol: "6"
      RuleAction: allow
      Egress: 'false'
      CidrBlock:  0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'


  # outbound rules; You can specify -1 for all protocols
  NetworkAclEntryEgress1b:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPrivateEC2
      RuleNumber: '300'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  NetworkAclEntryEgress2b:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPrivateEC2
      RuleNumber: '310'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      Ipv6CidrBlock: ::/0
      PortRange:
        From: '0'
        To: '65535'

  # create Network ACLs for public Subnets
  NetworkAclPublic:
    DependsOn: NetworkAclPrivateEC2
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Network_ACL_public

  SubnetNetworkAclAssociationA3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      NetworkAclId:
        Ref: NetworkAclPublic

  SubnetNetworkAclAssociationB3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      NetworkAclId:
        Ref: NetworkAclPublic

  SubnetNetworkAclAssociationC3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet3
      NetworkAclId:
        Ref: NetworkAclPublic

  # inbound rules
  # all open
  NetworkAclEntryIngress1c:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPublic
      RuleNumber: '300'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  NetworkAclEntryIngress2c:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPublic
      RuleNumber: '310'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'false'
      Ipv6CidrBlock: ::/0
      PortRange:
        From: '0'
        To: '65535'

  # outbound rules; You can specify -1 for all protocols
  # all open
  NetworkAclEntryEgress1c:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPublic
      RuleNumber: '300'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  NetworkAclEntryEgress2c:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPublic
      RuleNumber: '310'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      Ipv6CidrBlock: ::/0
      PortRange:
        From: '0'
        To: '65535'

  # Alarms Cloudwatch
  AlarmNatGatewayPacketsDropCount1:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: !Sub 'NAT gateway ${SubnetZone} dropped packets'
      Namespace: 'AWS/NATGateway'
      MetricName: PacketsDropCount
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: !Ref AlarmthresholdNAT2
      AlarmActions:
      - Fn::ImportValue:
          !Sub ${EnvironmentName}-NATTopicARN
      Dimensions:
      - Name: NatGatewayId
        Value: !Ref NATGateway1

  AlarmNatGatewayPacketsDropCount2:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: !Sub 'NAT gateway ${SubnetZone} dropped packets'
      Namespace: 'AWS/NATGateway'
      MetricName: PacketsDropCount
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: !Ref AlarmthresholdNAT2
      AlarmActions:
      - Fn::ImportValue:
          !Sub ${EnvironmentName}-NATTopicARN
      Dimensions:
      - Name: NatGatewayId
        Value: !Ref NATGateway2

  AlarmNatGatewayPacketsDropCount3:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: !Sub 'NAT gateway ${SubnetZone} dropped packets'
      Namespace: 'AWS/NATGateway'
      MetricName: PacketsDropCount
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: !Ref AlarmthresholdNAT2
      AlarmActions:
      - Fn::ImportValue:
          !Sub ${EnvironmentName}-NATTopicARN
      Dimensions:
      - Name: NatGatewayId
        Value: !Ref NATGateway3

  # NAT Alarm
  OutboundTrafficAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: monitors the amount of outbound traffic from clients in our VPC through the NAT gateway to the internet
      Namespace: AWS/NATGateway
      MetricName: BytesOutToDestination
      Dimensions:
      - Name: NatGatewayId
        Value: |
          - !Ref NATGateway1
            !Ref NATGateway2
            !Ref NATGateway3
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: !Ref AlarmthresholdNAT1
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
      - Fn::ImportValue: !Sub ${EnvironmentName}-NATTopicARN
      InsufficientDataActions:
      - Fn::ImportValue: !Sub ${EnvironmentName}-NATTopicARN
      OKActions:
      - Fn::ImportValue: !Sub ${EnvironmentName}-NATTopicARN
      TreatMissingData:  notBreaching

  PortallocationErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: monitors the ErrorPortAllocation metric and sends a notification when the value is greater than zero (0) for three consecutive 5-minute periods
      Namespace: AWS/NATGateway
      MetricName: ErrorPortAllocation
      Dimensions:
      - Name: NatGatewayId
        Value: |
          - !Ref NATGateway1
            !Ref NATGateway2
            !Ref NATGateway3
      Statistic: Maximum
      Period: 60
      EvaluationPeriods: 1
      Threshold: !Ref AlarmthresholdNAT2
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
      - Fn::ImportValue: !Sub ${EnvironmentName}-NATTopicARN
      InsufficientDataActions:
      - Fn::ImportValue: !Sub ${EnvironmentName}-NATTopicARN
      OKActions:
      - Fn::ImportValue: !Sub ${EnvironmentName}-NATTopicARN
      TreatMissingData:  notBreaching

# create an S3 VPC Endpoint
#    S3VpcEndpoint:
#      Type: AWS::EC2::VPCEndpoint
#      DependsOn:
#      - VPC
#      Properties:
#        PolicyDocument:
#          Statement:
#          - Effect: Allow
#            Principal: "*"
#            Action: "*"
#            Resource:
#            - arn:aws:s3:::*.amazonaws.com
#            - arn:aws:s3:::*.amazonaws.com/*
#            - arn:aws:s3:::repo.eu-west-1.amazonaws.com
#            - arn:aws:s3:::repo.eu-west-1.amazonaws.com/*
#        RouteTableIds:
#        - !Ref RouteTableNAT1
#        - !Ref RouteTableNAT2
#        - !Ref RouteTableNAT3
#        - !Ref PublicRouteTable
#        ServiceName:
#          Fn::Join:
#          - ''
#          - - com.amazonaws.
#            - Ref: AWS::Region
#            - ".s3"
#        VpcId: !Ref VPC

Outputs:
  StackName:
    Description: The Name of the Stack
    Value: !Ref AWS::StackName

  Owner:
    Description: Team or Individual that Owns this Formation.
    Value: !Ref Owner

  Project:
    Description: The project name
    Value: !Ref Project

  VPC:
    Description: returns the VPC ID
    Value: !Ref VPC

  PublicSubnet1:
    Description: returns the Subnet ID of the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: returns the Subnet ID of the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PublicSubnet3:
    Description: returns the Subnet ID of the public subnet in the 3rd Availability Zone
    Value: !Ref PublicSubnet3

  PrivateDBSubnet1:
    Description: returns the Subnet ID of the private subnet in the 1st Availability Zone
    Value: !Ref PrivateDBSubnet1

  PrivateDBSubnet2:
    Description: returns the Subnet ID of the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateDBSubnet2

  PrivateDBSubnet3:
    Description: returns the Subnet ID of the private subnet in the 3rd Availability Zone
    Value: !Ref PrivateDBSubnet3

  PrivateEC2Subnet1:
    Description: returns the Subnet ID of the private subnet in the 1st Availability Zone
    Value: !Ref PrivateEC2Subnet1

  PrivateEC2Subnet2:
    Description: returns the Subnet ID of the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateEC2Subnet2

  PrivateEC2Subnet3:
    Description: returns the Subnet ID of the private subnet in the 3rd Availability Zone
    Value: !Ref PrivateEC2Subnet3

  Internetgateway1:
    Description: returns the resource name of the internet Gateway
    Value: !Ref InternetGateway1

  NATGateway1:
    Description: returns the ID of the NAT gateway
    Value: !Ref NATGateway1

  NATGateway2:
    Description: returns the ID of the NAT gateway
    Value: !Ref NATGateway2

  NATGateway3:
    Description: returns the ID of the NAT gateway
    Value: !Ref NATGateway3

  NATGateway1EIP:
    Description: returns the value of the instance's PublicIp
    Value: !Ref NATGateway1EIP

  NATGateway2EIP:
    Description: returns the value of the instance's PublicIp
    Value: !Ref NATGateway2EIP

  NATGateway3EIP:
    Description: returns the value of the instance's PublicIp
    Value: !Ref NATGateway3EIP

  NATGatewayEIPAllocationid1:
    Description: returns the AllocationId of the instance
    Value: !GetAtt NATGateway1EIP.AllocationId

  NATGatewayEIPAllocationid2:
    Description: returns the AllocationId of the instance
    Value: !GetAtt NATGateway2EIP.AllocationId

  NATGatewayEIPAllocationid3:
    Description: returns the AllocationId of the instance
    Value: !GetAtt NATGateway3EIP.AllocationId

  # AlarmName
  OutboundTrafficAlarmName:
    Description: The Name of the Alarm
    Value: !Ref OutboundTrafficAlarm

  PortallocationErrorAlarmName:
    Description: The Name of the Alarm
    Value: !Ref OutboundTrafficAlarm

  DropPacketsNat1AlarmName:
    Description: The Name of the Alarm
    Value: !Ref AlarmNatGatewayPacketsDropCount1

  DropPacketsNat2AlarmName:
    Description: The Name of the Alarm
    Value: !Ref AlarmNatGatewayPacketsDropCount2

  DropPacketsNat3AlarmName:
    Description: The Name of the Alarm
    Value: !Ref AlarmNatGatewayPacketsDropCount3

  # AlarmARN
  OutboundTrafficAlarmARN:
    Description: The ARN of the Alarm
    Value: !GetAtt OutboundTrafficAlarm.Arn

  PortallocationErrorAlarmARN:
    Description: The ARN of the Alarm
    Value: !GetAtt PortallocationErrorAlarm.Arn

  DropPacketsNat1AlarmARN:
    Description: The ARN of the Alarm
    Value: !GetAtt AlarmNatGatewayPacketsDropCount1.Arn

  DropPacketsNat2AlarmARN:
    Description: The ARN of the Alarm
    Value: !GetAtt AlarmNatGatewayPacketsDropCount2.Arn

  DropPacketsNat1AlarmARN:
    Description: The ARN of the Alarm
    Value: !GetAtt AlarmNatGatewayPacketsDropCount3.Arn
